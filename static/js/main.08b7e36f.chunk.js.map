{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StardardToasts","addToast","useToasts","Button","secondary","onClick","appearance","autoDismiss","autoDismissTimeout","primary","setTimeout","FormWithToasts","FormWithDismissableToasts","onSubmit","value","a","MyCustomToast","dismissable","children","Message","Header","alert","DismissableToast","onDismiss","AnimatedToasts","customAnimationStyle","transition","opacity","width","CustomAnimatedToast","transitionState","styles","style","Comment","Group","Avatar","src","Content","Author","as","Metadata","Text","Actions","Action","App","placement","components","Toast","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08b7e36f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ToastProvider, useToasts } from 'react-toast-notifications'\nimport { Message, Container, Comment, Button } from 'semantic-ui-react';\nimport 'semantic-ui-css/components/reset.min.css';\nimport 'semantic-ui-css/components/site.min.css';\nimport 'semantic-ui-css/components/container.min.css';\nimport 'semantic-ui-css/components/icon.min.css';\nimport 'semantic-ui-css/components/message.min.css';\nimport 'semantic-ui-css/components/header.min.css';\nimport 'semantic-ui-css/components/comment.min.css';\nimport 'semantic-ui-css/components/button.min.css';\n\nimport { Transition } from 'react-transition-group';\n\nconst StardardToasts = () => {\n  const { addToast } = useToasts()\n  const onClick = () => {\n    addToast('message', { appearance: 'error', autoDismiss: true, autoDismissTimeout: 3000 })\n    addToast('message', { appearance: 'warning', autoDismiss: true, autoDismissTimeout: 3000 })\n    addToast('message', { appearance: 'success', autoDismiss: true, autoDismissTimeout: 3000 })\n    addToast('message', { appearance: 'info', autoDismiss: true, autoDismissTimeout: 3000 })\n  }\n  const oneByOne = () => {\n    setTimeout(() => {\n      addToast('message', { appearance: 'error', autoDismiss: true, autoDismissTimeout: 3000 })\n    }, 500)\n    setTimeout(() => {\n      addToast('message', { appearance: 'warning', autoDismiss: true, autoDismissTimeout: 3000 })\n    }, 1000)\n    setTimeout(() => {\n      addToast('message', { appearance: 'success', autoDismiss: true, autoDismissTimeout: 3000 })\n    }, 1500)\n    setTimeout(() => {\n      addToast('message', { appearance: 'info', autoDismiss: true, autoDismissTimeout: 3000 })\n    }, 2000)\n  }\n  return (\n    <>\n    <Button secondary onClick={onClick}>create 4 react-toast-notifications at once </Button>\n    <Button primary onClick={oneByOne}>create 4 react-toast-notifications one by one </Button>\n    </>\n  )\n}\n\nconst FormWithToasts = () => {\n  const { addToast } = useToasts()\n  const onClick = () => addToast('message', { appearance: 'error', autoDismiss: true, autoDismissTimeout: 3000 })\n  return <Button onClick={onClick}>create autodismissable semantic ui notification  </Button>\n}\n\nconst FormWithDismissableToasts = () => {\n  const { addToast } = useToasts()\n  const onSubmit = async value => addToast('Saved Successfully', { appearance: 'success', autoDismiss: false })\n  return <Button onClick={onSubmit}>create dismissable semantic ui notification </Button>\n}\n\nconst MyCustomToast = ({ appearance, dismissable, children, ...props }) => {\n  return (\n    <Message>\n      <Message.Header>Absolutely custom Semantic Message</Message.Header>\n      <p>\n        We updated our privacy policy here to better service our customers. We recommend reviewing the changes.\n        <div>\n          <button onClick={() => {alert('clicked')}}>custom button </button>\n        </div>\n      </p>\n   </Message>\n  )\n}\n\nconst DismissableToast = ({ appearance, dismissable, children, onDismiss, ...props }) => (\n  <Message onDismiss={() => { onDismiss()}}>\n    <Message.Header>Absolutely custom Message</Message.Header>\n    <p>\n      We updated our privacy policy here to better service our customers. We\n      <Button onClick={() => {alert('clicked')}}>custom button</Button>\n    </p>\n  </Message>\n);\n\nconst AnimatedToasts = () => {\n  const { addToast } = useToasts()\n  const onSubmit = async value => addToast('Saved Successfully', { appearance: 'success', autoDismiss: true, autoDismissTimeout: 3000 })\n  return <Button primary onClick={onSubmit}>create custom notification with animation</Button>\n}\n\nconst customAnimationStyle = {\n  transition: 'opacity 1s',\n  opacity: 0,\n  width: '300px',\n}\n\nconst CustomAnimatedToast = ({ appearance, dismissable, children, transitionState, onDismiss, ...props }) => {\n  const opacity = transitionState !== 'entered' ? 0 : 1\n  const styles = {\n    ...customAnimationStyle,\n    opacity,\n  }\n\n  return (\n    <div style={styles}> \n      <Message>\n\n        <Comment.Group>\n          <Comment>\n            <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\n            <Comment.Content>\n              <Comment.Author as='a'>Matt</Comment.Author>\n              <Comment.Metadata>\n                <div>Today at 5:42PM</div>\n              </Comment.Metadata>\n              <Comment.Text>How artistic!</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n        </Comment.Group>\n      </Message>\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <>\n      <ToastProvider>\n        <StardardToasts />\n      </ToastProvider>\n      <ToastProvider placement='bottom-right'  components={{ Toast: MyCustomToast }}>\n        <FormWithToasts />\n      </ToastProvider>\n      <ToastProvider placement='bottom-left' components={{ Toast: DismissableToast }}>\n        <FormWithDismissableToasts />\n      </ToastProvider>\n      <ToastProvider placement='bottom-left' components={{ Toast: CustomAnimatedToast }}>\n        <AnimatedToasts />\n      </ToastProvider>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}